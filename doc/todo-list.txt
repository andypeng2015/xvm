- GG: a presence of .DS_Store file asserts JsonDB store initialization
     (dataDir.files() -> file.contents.unpackUtf8())

- GG: missing "Content-Type" header blows the Dispatcher

- GG: group CLI commands into sections (one per class? @CommandGroup?)

- GG: BAST generation for "map[x] = y" is completely broken; additionally if a class has
      only a setter @Op("[]="), but no getter (@Op"[]") the compiler barfs

    class Test() {
        void test() {
            this["a"] = "A";
        }
        @Op("[]=") void put(String name, String value) {}
    }

- CP: how to prevent a DoS attack by a "curl" loop to overwhelm the session cache

- CP: make DigestAuthenticator.NonceTable into a service

- CP: do we need a UrlEncoder (similar to Java's)?

- CP: a content-type header for FormData has the following format:
    multipart/form-data; boundary=---------------------------1612195806993123533773008794
  the logic in MediaType.of() does not recognize it as parameters; simply drops it

- CP: add API support for multi-part body, for example (Body.x):
    conditional Body[] multipart() = False;

- CP: add formatting control to FPNumber.toString() and/or introduce
        "FPNumberFormat implements Format<FPNumber>" similar to Java's
        DecimalFormat. Also, could add something like Java's CompactNumberFormat

- GG: add the following method to Tuple
        /**
         * Obtain a `List` view of this Tuple. Note, that the type check will be performed only
         * during element extraction, not when this call is made.
         *
         * @param  the type of the element in the list
         *
         * @return the list view
         */
        <ElementType> List<ElementType> asList(Type<ElementType> elementType = Object)

- CP: BinaryInput:
    - readBytes() methods need to return the number of bytes read
    - would be nice to have an "eof" indicator

- GG: consider allowing to debug an eval expression (debug eval)

- GG: consider changing Service.callLater() API to
    <Result> Future<Result> callLater(function Result doLater());

- add a method to Map API to evaluate the "worst lookup cost" based on the current content
  (Mark's suggestion to evaluated keys' hashCode distribution)

- consider allowing comparison between T and T?; for example making Null always "Lesser"

- consider using (new ConcurrentSection()) to get "pre-switching" notification

- compiler to report on ambiguous type parameter name across a virtual child and its parent(s)

- add deadlock detection

- would be nice if we could figure out how to compute the inferred types for regular cases and the
    residual type for the "default" switch case, e.g.:

    Boolean test(Boolean|Int value)
        {
        switch (value)
            {
            case True, False:
                return value;      // the compiler could figure out the value is a Boolean
            default:
                return value > 0;  // the compiler could figure out the value is an Int
            }
        }

- CP: consider adding specialized String.append(Char c) and String.append(String s)

- CP: consider a compiler warning if a return value of Closeable type is ignored (@Adopt annotation)

- add compiler support for conditional Tuple

- consider adding a V_GET opcode that would combine the functionality of L_GET and MOVE_THIS for
  dynamically inflated (via & ref) or non-inflated properties; it would eliminate the need for
  corresponding compensation in ClassTemplate.getPropertyValue() and OpInvocable.getCallChain()
  (submission "Fix Ref handling for non-inflated properties" of 8/9/2022)

- GG: optimize-out unnecessary array cloning by changing getBytes() to copyBytes(arrayInto)

- consider @Proxyable annotation for compiler to enforce proxy-ability of an interface

// DEFERRED:
- classes in methods don't support captures of formal types
- @Atomic property with a mutable content needs to wrap
- what if timer.schedule() lambda throws? (exception is invisible)
- infinite loop detection
- upon a Future's gc report if an exception has not been handled
