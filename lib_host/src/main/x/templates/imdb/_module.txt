module %appName%_imdb
        incorporates imdb_.CatalogMetadata<%appSchema%_>
    {
    package oodb_ import oodb.xtclang.org;
    package imdb_ import imdb.xtclang.org;

    import oodb_.DBUser as DBUser_;

    import imdb_.Client       as Client_;
    import imdb_.DBObjectInfo as DBObjectInfo_;

    package %appName%_ import %appName%;

    import %appName%_.%appSchema% as %appSchema%_;

    @Override
    @RO Module schemaModule.get()
        {
        assert Module m := %appName%_.isModuleImport();
        return m;
        }

    @Override
    @Lazy Map<String, DBObjectInfo_> dbObjectInfos.calc()
        {
        return Map:
            [
            "" = new DBObjectInfo_("", DBSchema, "", [], False),
%PropertyInfos%
            ];
        }

    @Override
    Client_<%appSchema%_> createClient(
            Int                     clientId,
            DBUser_                 dbUser,
            Boolean                 readOnly = False,
            function void(Client_)? notifyOnClose = Null)
        {
        return new %appName%Client_(clientId, dbUser, readOnly, notifyOnClose);
        }

    service %appName%Client_(
            Int                     clientId,
            DBUser_                 dbUser,
            Boolean                 readOnly = False,
            function void(Client_)? notifyOnClose = Null)
                extends Client_<%appSchema%_>(clientId, dbUser, readOnly, notifyOnClose)
        {
        @Override
        class RootSchemaImpl(imdb_.Catalog.SchemaStore store_)
                implements %appSchema%_
            {
%PropertyGetters%
%SchemaMethods%
            }

        @Override
        Client_.DBObjectImpl createImpl(String id)
            {
            switch (id)
                {
%CustomInstantiations%
                default:
                    break;
                }

            return super(id);
            }

%CustomDeclarations%
        }
    }