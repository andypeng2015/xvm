class Client%appSchema%
        extends imdb.ClientRootSchema
        implements %appName%.%appSchema%
        implements db.Connection<%appName%.%appSchema%>
    {
    construct()
        {
        construct imdb.ClientRootSchema(Server%appSchema%);
        }

    // schema properties
%ClientPropertyDeclarations%

    // ClientDB* classes
%ClientChildrenClasses%

    // ----- internal API support ------------------------------------------------------------------

    @Override
    @Unassigned db.DBUser dbUser;

    @Override
    public/protected ClientTransaction? transaction;

    @Override
    ClientTransaction createTransaction(
                Duration? timeout = Null, String? name = Null,
                UInt? id = Null, db.DBTransaction.Priority priority = Normal,
                Int retryCount = 0)
        {
        ClientTransaction tx = new ClientTransaction();
        transaction = tx;
        return tx;
        }

    protected (Boolean, db.Transaction) ensureTransaction()
        {
        ClientTransaction? tx = transaction;
        return tx == Null
                ? (True, createTransaction())
                : (False, tx);
        }

    Boolean checkAutoCommit()
        {
        return transaction == Null;
        }

    class ClientTransaction
            extends imdb.ClientTransaction<%appName%.%appSchema%>
            implements %appName%.%appSchema%
        {
        construct()
            {
            construct imdb.ClientTransaction(
                Server%appSchema%, Server%appSchema%.createDBTransaction());
            }

        // schema properties
%ClientTxPropertyGetters%

        // transaction API

        @Override
        db.SystemSchema sys.get()
            {
            TODO
            }

        @Override
        (db.Connection<%appName%.%appSchema%> + %appName%.%appSchema%) connection.get()
            {
            return this.Client%appSchema%;
            }

        @Override
        Boolean pending.get()
            {
            return this.Client%appSchema%.transaction == this;
            }

        @Override
        Boolean commit()
            {
            try
                {
                return super();
                }
            finally
                {
                this.Client%appSchema%.transaction = Null;
                }
            }

        @Override
        void rollback()
            {
            try
                {
                super();
                }
            finally
                {
                this.Client%appSchema%.transaction = Null;
                }
            }
        }
    }
