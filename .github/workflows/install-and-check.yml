#
# GitHub runner workflow for building, verifying and testing the XVM repo.
#

name: XVM Install and Check

# Check if "pull-request" makes it possible to add a branch protection status check requirement on master.
on: push

env:
  ORG_GRADLE_PROJECT_xtcPluginOverrideVerboseLogging: true
  ORG_GRADLE_PROJECT_includeBuildManualTests: true
  ORG_GRADLE_PROJECT_includeBuildAttachManualTests: true
  ORG_XTCLANG_JAVATOOLS_SANITY_CHECK_JAR: true
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: false
  gradle_options: --stacktrace --warning-mode all --console verbose

#concurrency:
  #group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  #cancel-in-progress: true

jobs:
  setup:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    # Declare outputs for one of the steps in the job.
    outputs:
      version: ${{ steps.properties.outputs.version }}
      major: ${{ steps.properties.outputs.major }}
      minor: ${{ steps.properties.outputs.minor }}
      patch: ${{ steps.properties.outputs.patch }}
      snapshot: ${{ steps.properties.outputs.snapshot }}
      tag_new: $${ steps.properties.outputs.tag_new }}
      tag_last: $${ steps.properties.outputs.tag_last }}
      changelog: ${{ steps.properties.outputs.changelog }}

    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          function parse_version() {
            local _re='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z-]*\)'
            local _match="s#$_re#\\$1#"
            echo $xdk_version | sed -e $_match
          }

          xdk_version="$(cat ./VERSION)"
          if [[ "$xdk_version" == *SNAPSHOT ]]; then
            echo "snapshot=true" >> $GITHUB_OUTPUT
          fi          
          xdk_version="${xdk_version%-SNAPSHOT}"
          
          major="$(parse_version 1)"
          minor="$(parse_version 2)"
          patch="$(parse_version 3)"
          tag_last="$(git describe --tags --abbrev=0)"          

          echo "version=$xdk_version" >> $GITHUB_OUTPUT
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$patch" >> $GITHUB_OUTPUT
          echo "tag_new=v$xdk_version" >> $GITHUB_OUTPUT
          echo "tag_last=$tag_last" >> $GITHUB_OUTPUT          
          # TODO: changelog          

  build:
    name: Build installDist
    needs: [ setup ]
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-tags: true # fetch tags even if fetch-depth == 0
          show-progress: true

      - name: Setup Java and system-wide caching
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: '21'
          cache: 'gradle'

      - name: Setup Gradle and Gradle Cache
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: false

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v2.1.2

      - name: Check XDK version and tags
        run: |
          echo "*** XDK_VERSION: ${{ needs.setup.outputs.version }}"
          echo "*** XDK_SNAPSHOT: ${{ needs.setup.outputs.snapshot }}"  
          echo "*** XDK_VERSION_MAJOR: ${{ needs.setup.outputs.major }}"
          echo "*** XDK_VERSION_MINOR: ${{ needs.setup.outputs.minor }}"
          echo "*** XDK_VERSION_PATCH: ${{ needs.setup.outputs.patch }}"
          echo "*** XDK_VERSION_TAG: $$${{ needs.setup.outputs.tag_new }}"
          echo "*** XDK_VERSION_TAG_LAST: ${{ needs.setup.outputs.tag_last }}"

      - name: Execute Gradle installDist
        run: ./gradlew ${{ env.gradle_options }} installDist

      - name: Execute Gradle manualTest sanity checks
        run: |
          ./gradlew ${{ env.gradle_options }} manualTests:runXtc
          ./gradlew ${{ env.gradle_options }} manualTests:runOne -PtestName=TestMisc
          ./gradlew ${{ env.gradle_options }} manualTests:runTwoTestsInSequence
          ./gradlew ${{ env.gradle_options }} manualTests:runParallel

      # Always publish a snapshot on push (TODO: change to push to master, not just push)
      - name: XDK Publish Snapshot to xtclang.org GitHub Maven Packages.
        if: ${{ needs.setup.output.snapshot == 'true' }}
        run: echo "*** XDK_VERSION Publishing SNAPSHOT" && ./gradlew publishRemoteSnapshot
        env:
          ORG_XTCLANG_REPO_GITHUB_USER: xtclang-bot
          ORG_XTCLANG_REPO_GITHUB_TOKEN: ${{ secrets.ORG_XTCLANG_GITHUB_MAVEN_PACKAGE_REPOSITORY_READ_WRITE }}

      - name: Check Existing Tag
        uses: mukunku/tag-exists-action@v1.4.0
        id: checkTag
        with:
          tag: ${{ env.needs.setup.outputs.tag_new }}

      # Publish a release if non snapshot, and we don't already have the tag. If we have the tag, we fail.
      - name: XDK Publish Release Publication for non-snapshot and tag source
        if: ${{ needs.setup.output.snapshot != 'true' }}
        run: |
          echo "TAG:" ${{ steps.checkTag.outputs.exists }}
          if [ ${{ steps.checkTag.outputs.exists }} ]; then
            echo "FAILURE. Tag exists."
            exit 1
          fi
