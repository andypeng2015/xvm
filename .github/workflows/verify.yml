#
# GitHub runner workflow for building, verifying and testing the XVM repo.
#
# It also does some quick sanity check that we can provide release artifacts. This latter part
# will be implemented in much better detail when we have a marge to master and minimal effort
# GitHub release plugin integration, so we can automate release generation.
#
# TODO: Also hook up gradle-profiler here to spot regressions and benchmark the build.
#
# TODO: Add a release workflow, and a distribution creation workflow. Reuse parts of the
#   "xdk-release" repo, that can run the cross product of aarch64, amd64, Linux, Windows and
#   MacOS, including creating the Windows "exe" installer, on any platform with Nsis.
#
# TODO: Add workflow jobs in another GitHub workflow configuration that builds SNAPSHOT releases
#   when a PR is merged into master.
#
# TODO: Discuss what other kinds of GitHub workflow actions we need. This can be anything
#   from cron jobs that run every night, to containerization tests/efforts/creations.
#
# TODO: Retain more build information than the defaults (log output and build scan links). I.e.
#   configure any build output files that we may want to inspect to be retained as well.
#   @see https://github.com/gradle/actions/blob/main/setup-gradle/README.md#github-dependency-graph-support
#
# TODO: Set up Discord channel chat messages, when an action is started, successful or fails.
#
# TODO: Verify that the build jobs run both with and without the build cache. Since it takes
#   time to rebuild the cache, the clean cache run should be a separate workflow, and it may be
#   a good idea to run it only on pull requests, not on every push, or something like that.
#   Another option is to have a GitHub cron job action, that nukes the caches every night, so that
#   at least the first GitHub workflow of the day is known to build with a clean cache.
#
# TODO: File these TODOs as issues in the GitHub repository.

#
# Configure a Gradle build action.
#
# The current version of this GitHub action is v2.4.2, is at the time of writing still considered
# secure, and has fixed previous issues with leaking secrets to the build cache in the GitHub runner
# container. Dependabot will alert us to any newly discovered security problems.
#
# @see: https://github.com/gradle/gradle-build-action#readme
# @see: https://github.com/gradle/gradle-build-action?tab=readme-ov-file#select-which-branches-should-write-to-the-cache
#
# By default, the Gradle action will only write to the cache from jobs on the 'master' branch.
# it is also possible exclude certain parts of the build from the cache, with:
#
# @see: https://github.com/gradle/actions/blob/main/setup-gradle/README.md#exclude-content-from-gradle-user-home-cache
#

name: Verify XDK build

# Check if "pull-request" makes it possible to add a branch protection status check requirement on master.
on:
  push

env:
  #
  # This turns into a project property that outputs some important lines of the XTC plugin logic to the console.
  # The flag is intended to provide enough information to do a reproducible run for any action performed by the Plugin.
  #
  ORG_GRADLE_PROJECT_xtcPluginOverrideVerboseLogging: true
  #
  # The following flags were intended to be used to finish the build run with a simple sanity check, compiling
  # and running a text program, making sure that both the build DSL and the mechanism for consuming the
  # XDK being worked on as an artifact have not been broken.
  ORG_GRADLE_PROJECT_includeBuildManualTests: true
  ORG_GRADLE_PROJECT_includeBuildAttachManualTests: true

  # Provide debug information of all build cache actions:
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

  workdir: $(pwd)

jobs:
  verify-build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      # Run the Gradle build, with verbose logs, and stack traces enabled to verify it works.
      - name: Verify Gradle Build
        run: ./gradlew build --stacktrace && ./gradlew installDist --stacktrace
      # Run the Gradle installation tasks to verify that we can create distributions, and that their
      # layouts are correct.
      - name: Print workdir
        run: echo ${{ env.workdir }}
      # Sanity check test run. XUnit will give us real successes or failures.
      - name: ManualTests Run Default
        run: ./gradlew manualTests:runXtc
      # Extra checkin tests
      - name: ManualTests Run One By Property
        run: ./gradlew manualTests:runOne -PtestName=TestMisc
      # Extra checkin tests
      - name: ManualTests Run Two In Sequence
        run: ./gradlew manualTests:runTwoTestsInSequence
      # Extra checkin tests
      - name: ManualTests parallel tests
        run: ./gradlew manualTests:runParallel
