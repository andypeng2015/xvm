TODO:
* Sanity check that inputs and outputs work between compile and run tasks for XTC, and make sure they only rebuild incrementally.
* TODO: Cache launcher tasks?
* Command line retrieval prgrammatically/config option for xtclaunch tasks. (dry run?)
* Use the PluginMaven default publication, don't add a special one for XTC. This is hardcoded and forced to generate docs and source from the gradlePluginPortal logic anyway.
* Allow configuration based running xtc module from gradlew - now just make the more fine grained results override the outermost ones. We do that in stdin/out but not the others.
* Unicode dependencies.
* Move all constants like "javatools-fatjar" into the XdkBuild framework.
* Create first release from master when merged, and add github release plugin.

Maybe after merge:
* // TODO: Remember to use the ExecResult.stdoutContents variables instead of the horrible stuff we do with byte arrays.* Speed up build part 2
* Abort if running gradle and not gradlew. We just need a way to detect it.
* Investigate the Git release plugin
* Add a timer so we can get task events reported at the end of each action, or XTCTask.
* Add a unit test to the test source set of something and just make sure the runXtcTest and compileXtcTest tasks
work. Source set specific configuration? We don't have that yet, I guess? Or do we? Check what we can derive
from the source set sent into the compile and run tasks for the test source set set.
* Make property prefix "org.xtclang." a global constant or something we instantiate the XdkVersionHandler with.
* Can we get rid of the gradlePluginPublish source and doc publications? Where does the publication come from?
* UseLogging, prefix?
* Revisit all file/dir references in Gradle build scripts, or any providers in general, to ensure laziness and
  to avoid ugly hacks (especially to create paths). Like, there are serveral places that will look a lot prettier
  with the "provider {}" DSL sugar.
* git maven plugin to help ease the correct git flow?
* More laziness for getting files etc:
   val output: Provider<RegularFile> = layout.buildDirectory.file("myOutput.txt")
   // If you really need the java.io.File for a non lazy API
   output.get().asFile
   // Or a path for a lazy String based API
   output.map { it.asFile.path }
   Look for all get() and see if they can be lazy instead.

Done:
* Build accumulator
* Investigate debugger use case for javatools launcher.
* Unicode as part of a property guarded normal build step for lib-ecstasy.
* org.xtclang for gradlePluginPortal
* Run task does not seem to print to stdout as it should? Reset stdout stding.
* Native launcher compile and run tasks.
* VERSION and GROUP files in the root.
* Nsis archive in corporate secrets?
* Rename "xdk" version tag to avoid conflicts with "xdk.group" during type safe version catalog resolution
* nsis, verify the installer
* org.xtclang for mavenCentral
* Simplest app template, or what is required.
* Semantic versioning from gradle properties? Probably not a good idea? Enough in the plugin and the xdk?

# org.xtclang artifact id so we own the domain.
#
# FINISH TH EXAMPLE APPS.

# Use the gitlab actions runner framework on the command line.

--
Prio:

* Allow redirection of stdout/stderr to file for xtc tasks
* Add git script helpers and lock down master from direct pushes by anyone.

val debugPort = "8000"

enum class JreVersion(
val value: String, val debugString: String = "",
 val additionalDependencies: DependencyHandlerScope.() -> Unit = {} ) {
    Eleven(value = "11.0.2-jre-slim",
        debugString = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$debugPort",
        additionalDependencies = {
            implementation("org.glassfish.jaxb:jaxb-runtime")
        }
    )
}
TODO: Properties from properties file should always be overridden by System.getenv or System.getProperties equivalents
  for that property, if they exist. Right now it's the other way around, which confuses people.
TODO: Add byte ingestion counters for the compiler, perhaps, so we can tell if a rerun actually took place just by looking at the screen.
TODO: Add a configuraton/text file/dsl, anything that can be read from disk that is interpreted as arguments for the launcher. This would be
useful and could be drawn out directly from xtc kotlin gradle dsls in the plugin with very low complexity. I have at a few occaasins
wished I had something like that
TODO: xtcRunTestAll should not break if we don't have test source sets, it should warn and exit.
TODO: Move javatool_unicode generation tables to some other part of the build logic. If we reach lib_ecstasy and we have e.g. build logic cache hits for unicode generation, we should interpret it to mean that we want to overwrite the resources for lib_ecstasy because there are new tables.
TODO runXtc/All should not fail for e.g. test when there is no test source set.
TODO Write tests that makes sure the plugins can parse a property from the right places and in the right order + respects the gradle -P flag, system properties from other places and the ENV
TODO: Fix the unicode depenency problems, move unicode to environment or property thing.
TODO: Add native launcher tasks.
TODO: is pruneBuildRepo executed always in the config phase? That makes no sense!? WHY!
TODO: XTC Language; Can we change the $ template operator to work like Kotlin does and just nearly like Kotlin, but different?
TODO: Add a settings plugin that is also part of the distribution, which contains things like the github repository syntactic sugare, and maybe sugar for finding the local XDK installation and its repo.
TODO: Gradle.useLogger - add a custom logger with timing, start and finish, indentation and levels, with possibilities to add outputs like a file or stderr. Configure through gradle properties?
TODO: Add runXtcNative and compileXtcNative, actually model a local distribution in a build logic.kt class.
TODO: Get rid of the project delegate stuff, just extend project?
TODO: Add include and exclude patterns for the xtcCompile and xtcRun configurations. It should work for the former
  already, since it inherits a standard Gradle source task.
./lib_ecstasy/build.gradle.kts: * Gradle/Maven build infrastructure.  TODO: make this a build task.
./plugin/build.gradle.kts:    // TODO distribute and package Javadocs in the future, when we have them.
./xdk/build.gradle.kts:    // TODO these are added twice to the archive configuration. We probably don't want that.
./xdk/build.gradle.kts:    // TODO: Test task should be automatically configured by XTC the plugin in the future
./xdk/build.gradle.kts: * TODO: This task should create symlinks for the launcher names to the right binaries.
./xdk/build.gradle.kts: * TODO better copying, even if it means hardcoding directory names.
./xdk/build.gradle.kts:    // TODO: This can be done a lot more nicely with relative path copy/renaming as
./xdk/build.gradle.kts:// TODO: Add a sanity check, that makes sure all files in the distribution are there,
./xdk/build.gradle.kts:// TODO - Keep dir patterns here too, or have it return copy specs based on resources
./manualTests/webapp/build.gradle.kts:    // TODO: webappConsumer(project(":webapp"))
./manualTests/webapp/build.gradle.kts:// TODO: Right now processResources exists through the xtc plugin, is run, and copies src/<sourceSet>/resources to build resources for that source set
./manualTests/build.gradle.kts:// TODO: Add source set for negative tests.
./manualTests/build.gradle.kts:// TODO: Add modules { } dsl section to collect single module { } configurations, instead of listing them in the config as a sequence.
./javatools_bridge/build.gradle.kts:    // TODO: outputFilename = "_native.xtc" has a bug. Figure out why.
./javatools_launcher/build.gradle.kts: * TODO: We could add a mechanism to native compile this, but it would have to cross compile
./javatools/build.gradle.kts:// TODO: Move these to buildSrc, the XDK composite build does use them in some different places.
./javatools/build.gradle.kts:    // TODO: It may be fewer special cases if we just add to the source sets from these dependencies, but it's not
./javatools/build.gradle.kts:    from(file(xdkImplicitsPath)) // TODO Hack: this should be changed to use a consumable configuration, and/or moving javautils as a subproject, as it is never used standalone, just as part of a fat javatools jar.
TODO: SAVE THE BUILD SCAN FROM THE LATEST BUILD SOMEWHERE LOCAL WHERE WE CAN LOOK LATER. CONTAINER OUR OWN GRADLE ENTERPRISE SERVER.

